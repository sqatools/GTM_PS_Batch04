# Topics we have covered

-> test file
    python -m pytest -v .\test_smoke_cases.py

-> test function
   python -m pytest -v .\test_smoke_cases.py::test_subtraction

-> test markers
   python -m pytest -v -m sanity .\test_smoke_skip_cases.py

-> test marker with and condition
   python -m pytest -v -m "t1 and sanity" .\test_smoke_skip_cases.py

-> test marker with or condition
   python -m pytest -v -m "t1 or sanity" .\test_smoke_skip_cases.py

-> test level execution (specific test)
   python -m pytest -v .\test_smoke_cases.py::test_subtraction

-> test file level execution

-> test folder level execution
   python -m pytest -v .\tests\
   python -m pytest -v -m smoke .\tests\

-> test skip marker (unconditional skip)

-> test skipif (conditional based skip)

-> html report
   install pytest-html package using command (pip install pytest-html)
   python -m pytest -v -m smoke .\tests\ --html=report.html

->  xfail for intermittent failed test cases due to specific reason
    python -m pytest -v  .\tests\test_feature_xfail_cases.py --html=report.html

################### Fixtures ########################

-> fixture fundamentals(scopes, function, module, package, session, class)
   python -m pytest -v -s .\test_booking_cases.py

-> Test parameterization with and without excel data.

-> Read data from excel sheet and use in automation

# scenario to complete
# 1. test file with all fixture function in one file
# 2. test file with conftest file.
# 3. test file with data file and utility file to read data from excel.


# test class file execution
   python -m pytest -v -s .\test_feature_class.py

# execute specific function from test class
  python -m pytest -v -s .\test_feature_class.py::TestBooking::test_hotel_booking

# open browser for each class -> execute specific class -> close browser
  (repeat same process for all the classes with class fixture.

# Open one browser -> execute all the test classes -> close browser
  we will achieve this with session and function fixture.

-> Pytest.ini file marker registration
-> Logging in pytest
-> Parallel execution of the test cases with pytest-xdist module
   pip install pytest-xdist

   # In below command auto represent the number of the cores of the system to pick the parallel execution
     of the test case
   python -m pytest -v -n auto .\test_prarallel_execution\

   #  In below -n 4 represent, every time, it will 4 test cases to execute parallely.
    python -m pytest -v -n 4 .\test_prarallel_execution\


-> Add custom command line option to provide browser name./
   python -m pytest -v --browser=Firefox .\test_class_commandline_options\


-> Add specific order to the test case for the execution with marker "pytest.mark.order"


->  Design custom framework (Hybrid framework)

    seleniumbase
        -  def click_element()
        -  def enter_data()
        -  def select_dropdown()

    login_page_class ( locator file, data file)
        -  def enter_username()
               enter_data()

        -  def enter_password()
               enter_data()

        -  def click_submit_btn()
                click_element()

    registration_page_class()


    test_login_page
        - def test_login_functionality()
              enter_firstname()
              enter_password()
              click_submit_btn()







